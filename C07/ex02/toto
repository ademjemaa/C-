#include "array.hpp"

Array::Array(void) : array(new T[0]), size(0)
{
}

Array::Array(unsigned int i): array(new T[i]), size(i)
{
}

Array::~Array(void)
{
    delete [] this->array;
}

Array::Array(const Array &tab)
{
    this->array = new T[tab.getSize()];
    this->size = tab.getSize();
    for (int i = 0; i < this->size; i++)
        this->array[i] = tab.array[i];
}

Array   &Array::operator=(const Array &tab)
{
    if (this == tab)
        return (this);
    this->array = new T[tab.getsize()];
    this->size = tab.getSize();
    for (int i = 0; i < this->size; i++)
        this->array[i] = tab.array[i];
    return (this);
}

Array::getSize(void)
{
    return (this->size);
}

Array   &Array::operator[](unsigned int i)
{
    if (i > this->size)
        throw Overflow();
    return (this->array[i]);
}

const char* Array::Overflow::what() const throw()
{
    return ("Error : Array overflow\n");
}